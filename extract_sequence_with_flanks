# Load necessary libraries
library(BSgenome)
library(BSgenome.Hsapiens.UCSC.hg38)
library(dplyr)

# Function to extract nucleotide sequences with 50bp flanking regions and apply reverse complement if needed
extract_sequence_with_flanks <- function(chromosome, exon_start, exon_end, strand, flank_length = 50) {
  # Check if chromosome has 'chr' prefix, if not add it
  if (!grepl("^chr", chromosome)) {
    chromosome <- paste0("chr", chromosome)
  }
  
  # Define flanking coordinates
  extended_start <- exon_start - flank_length
  extended_end <- exon_end + flank_length
  
  # Ensure valid genomic start and end points
  genomic_start <- min(extended_start, extended_end)
  genomic_end <- max(extended_start, extended_end)
  
  # Extract the full sequence (including flanks)
  full_seq <- getSeq(BSgenome.Hsapiens.UCSC.hg38, names = chromosome, start = genomic_start, end = genomic_end)
  
  # Convert the full sequence to character for manipulation
  full_seq <- as.character(full_seq)
  
  # Calculate the positions of the exon sequence relative to the full sequence
  exon_start_rel <- flank_length + 1
  exon_end_rel <- exon_start_rel + (exon_end - exon_start)
  
  # Convert upstream and downstream regions to lowercase, keep exon in uppercase
  full_seq_mod <- paste0(tolower(substring(full_seq, 1, exon_start_rel - 1)),  # Upstream region
                         toupper(substring(full_seq, exon_start_rel, exon_end_rel)),  # Exon (uppercase)
                         tolower(substring(full_seq, exon_end_rel + 1)))  # Downstream region
  
  # Custom function to get reverse complement while retaining case
  reverse_complement_case <- function(sequence) {
    # Define complement mapping for both upper and lower case
    complement_map <- c(
      'A' = 'T', 'T' = 'A', 'C' = 'G', 'G' = 'C',
      'a' = 't', 't' = 'a', 'c' = 'g', 'g' = 'c'
    )
    
    # Split the sequence into individual characters
    chars <- unlist(strsplit(sequence, ""))
    
    # Reverse the sequence and get the complement
    rev_complement <- sapply(rev(chars), function(x) complement_map[x])
    
    # Collapse the character vector back into a string
    return(paste(rev_complement, collapse = ""))
  }
  
  # Apply reverse complement if the strand is "-"
  if (strand == "-") {
    full_seq_mod <- reverse_complement_case(full_seq_mod)
  }
  
  return(full_seq_mod)  # Return the modified sequence with proper casing and reverse complement if applicable
}

# Example Data Frame
# Load necessary libraries
library(BSgenome)
library(BSgenome.Hsapiens.UCSC.hg38)
library(dplyr)

# Function to extract nucleotide sequences and apply reverse complement based on strand
extract_sequence <- function(chromosome, exon_start, exon_end, strand) {
  # Check if chromosome has 'chr' prefix, if not add it
  if (!grepl("^chr", chromosome)) {
    chromosome <- paste0("chr", chromosome)
  }
  
  # Ensure valid start and end points
  start <- min(exon_start, exon_end)
  end <- max(exon_start, exon_end)
  
  # Extract the sequence using the coordinates and chromosome
  seq <- getSeq(BSgenome.Hsapiens.UCSC.hg38, names = chromosome, start = start, end = end)
  
  # Convert sequence to character string
  sequence <- as.character(seq)
  
  # Custom function to get reverse complement while retaining case
  reverse_complement_case <- function(sequence) {
    # Define complement mapping for both upper and lower case
    complement_map <- c(
      'A' = 'T', 'T' = 'A', 'C' = 'G', 'G' = 'C',
      'a' = 't', 't' = 'a', 'c' = 'g', 'g' = 'c'
    )
    
    # Split the sequence into individual characters
    chars <- unlist(strsplit(sequence, ""))
    
    # Reverse the sequence and get the complement
    rev_complement <- sapply(rev(chars), function(x) complement_map[x])
    
    # Collapse the character vector back into a string
    return(paste(rev_complement, collapse = ""))
  }
  
  # Apply reverse complement if the strand is "-"
  if (strand == "-") {
    sequence <- reverse_complement_case(sequence)
  }
  
  return(sequence)
}

# Example Data Frame
# Example Data Frame
df <- data.frame(
  gene = c("SLK", "OPA1", "LDHB"),
  chr = c("10", "3", "12"),
  strand = c("+","+","-"),
  exonStart_0base = c(104010816, 193626092, 21657751),
  exonEnd = c(104010908, 193626202, 21657835),
  FDR = c(0,0.00000124,0.00005245),
  IncLevelDifference = c(-0.405,0.204,-0.315)
)

# Apply the combined function to each row in the data frame using mutate
df_with_sequences <- df %>%
  mutate(nucleotide_sequence = mapply(extract_sequence, chr, exonStart_0base, exonEnd, strand))

# View the updated data frame with the new 'nucleotide_sequence' column
print(df_with_sequences)
)

# Apply the function to each row in the data frame using mutate
df_with_sequences <- df %>%
  mutate(nucleotide_sequence = mapply(extract_sequence_with_flanks, chr, exonStart_0base, exonEnd, strand))

# View the updated data frame with the new 'nucleotide_sequence' column
print(df_with_sequences)
